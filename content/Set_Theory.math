
::
# Set Theory

Several different frameworks can serve as a foundation for mathematics
including type theory and category theory.

A common framework is *Zermelo-Fraenkel Set Theory*, that we describe here.
In this theory, everything in mathematics can be described in terms of sets
and care must be taken to carefully define what is, and is not, a set to avoid
paradoxes.

However, one can think of a set as a collection of things, the view of
*naive set theory*.  The conditions that are necessary to make this informal
definition precise are given below.

## Zermelo-Fraenkel Set Theory

::


[#zermelo.fraenkel.set.theory]
Topic: "Zermelo-Fraenkel Set Theory"
content:
. "
  Zermelo-Fraenkel Set Theory forms the basis for modern mathematics.
  Although other foundations of mathematics can be used (such as type theory,
  category theory, or model theory), Zermelo-Fraenkel Set Theory (in particular
  with the Axiom of Choice, ZFC) is typically used.

  In this theory, everything is a set, but what a set is, as defined below, must
  be carefully described to avoid paradoxes such as as Russell's Paradox.
  "


::
Before continuing, we need to specify what it means for two sets to be equal.
Later, we will get into the precise definition what a set is.
::


[x \set.=/ y]
States:
when: 'x, y is \set'
that:
. forAll: z
  where: 'z in x'
  then: 'z in y'
. forAll: z
  where: 'z in y'
  then: 'z in x'
written: "x? = y?"


[x \set.neq/ y]
States:
when: 'x, y is \set'
that:
. not: 'x \set.=/ y'
written: "x? \neq y?"


::
The empty set needs to be defined explicitly as it is used to define what
a set itself is.
::


[\empty.set]
Defines: X
means: 'X is \set'
satisfying:
. not:
  . exists: x
    where: 'x is \set'
    suchThat: 'x in X'
written: "\emptyset"
Metadata:
. overview: "An empty set is a set that doesn't
             contain any elements."
. topics: "#zermelo.fraenkel.set.theory"
. related: "\empty.set"


::
**Zermelo-Fraekel Set Theory** builds sets as collections of things that
satisfy a specified propery.  The following definition explicitly calls a
property of that type a *\set.property*.
::


Foundation:
. [\set.property(x)]
  Defines: P(x)
  means: "A condition that $x?$ must satisfy to be in a set."
  written: "P(x?)"


::
The following are axioms that form the backbone of the conditions that
describe what a set is.  These axioms need to be carefully articulated
to avoid paradoxes forming.
::


[\set.axiom.of.extensionality]
Axiom: "Axiom of Extensionality"
given: x, y
where: 'x, y is \set'
then:
. if:
  . forAll: z
    where: 'z is \set'
    then:
    . iff: 'z in x'
      then: 'z in y'
  then:
  . 'x = y'


[\set.axiom.existence.of.empty.set]
Axiom: "Axiom of Existence of Empty Set"
then:
. exists: e
  where: 'e is \set'
  suchThat: 'e = \empty.set'


[\set.axiom.of.regularity]
Axiom: "Axiom of Regularity"
given: x
where: 'x is \set'
then:
. if: 'x \set.neq/ \empty.set'
  then:
  . exists: y
    where: 'y is \set'
    suchThat:
    . 'y in x'
    . not:
      . 'x in y'


[\set.axiom.of.unordered.pair]
Axiom: "Axiom of Unordered Pair"
given: x, y
where: 'x, y is \set'
then:
. exists: z
  where: 'z is \set'
  suchThat:
  . or:
    . 'x in z'
    . 'y in z'


::
With all of the necessary machinery in place, the precise definition of what
a set is can be made.
::


Foundation:
. [\set]
  Defines: X
  means: "The base item of Zermelo-Fraenkel Set Theory"
  satisfying:
  . '\set.axiom.existence.of.empty.set'
  . '\set.axiom.of.extensionality'
  . '\set.axiom.of.regularity'
  . '\set.axiom.of.unordered.pair'
  viewing:
  . membership:
    through: 'X'
  . equality:
    between: x, y
    provided: 'x \set.=/ y'
  written: "\textrm{set}"
Metadata:
. topics: "#zermelo.fraenkel.set.theory"
. related: "\empty.set"


::
The following describes what is refered to as "set builder notation" by
building a set of all elements within another set that satisfying a certain
condition or conditions.
::


[\set[x...]:where{within}:suchThat{cond}...]
Defines: X
means: 'X is \set'
collects:
. given: t...
  where: 'within'
  all: 't'
  suchThat: 'cond...'
written: "\left \{ within? \: | \:
              cond{... \textrm{ and } ...}?
          \right \}"


::
Next, we define what it means for something to be or not to be an element of
a set.
::


[x \in/ X]
States:
when: 'X is \set'
that: 'x in X'
written: "x?? \in X??"


[x \notin/ X]
States:
when: 'X is \set'
that:
. not:
  . 'x in X'
written: "x? \notin X?"


::
## Building Sets from Other Sets

Now we have the machinery necessary to describe how to build sets from other
sets.
::


[A \subset/ B]
States:
when: 'A, B is \set'
that:
. forAll: a
  where: 'a in A'
  then: 'a in B'
written: "A?? \subseteq B??"


[A \strict.subset/ B]
States:
when: 'A, B is \set'
that:
. 'A \subset/ B'
. 'A \neq/ B'
written: "A?? \subsetneq B??"


[A \set.intersect:within{U}/ B]
Defines: C
when: 'A, B, U is \set'
means: 'C := \set[c]:where{c \in/ U}:suchThat{c \in/ A}{c \in/ B}'
written: "A?? \cap_{U??} B??"


[A \set.intersect/ B]
Defines: C
requiring: U
when:
. 'A, B, U is \set'
. 'A \subset/ U'
. 'B \subset/ U'
means: 'C := A \set.intersect:within{U}/ B'
written: "A?? \cap B??"


[A \set.union:within{U}/ B]
Defines: C
when:
. 'A, B, U is \set'
. 'A \subset/ U'
. 'B \subset/ U'
means: 'C := \set[c]:where{c \in/ U}
                    :suchThat{
                      {c \in/ A} \or/
                      {c \in/ B}
                    }'
written: "A?? \cup_{U??} B??"


[A \set.union/ B]
Defines: C
requiring: U
means: 'C := A \set.union:within{U}/ B'
written: "A?? \cup B??"


[A \set.minus/ B]
Defines: C
when: 'A, B is \set'
means: 'C := \set[c]:where{c \in/ A}:suchThat{c \notin/ B}'
written: "A?? \backslash B??"


[A \symmetric.difference/ B]
Defines: C
when: 'A, B is \set'
means: 'C := {A \set.minus/ B} \set.union/
                {B \set.minus/ A}'
written: "A?? \Delta B??"


[\set.complement{A}:within{U}]
Defines: B
when: 'A, U is \set'
means: 'B := \set[b]:where{b \in/ U}:suchThat{b \notin/ A}'
written: "A??^C"


[A \set.times/ B]
Defines: C
when: 'A, B is \set'
means: 'C is \set'
collects:
. given: a, b
  where:
  . 'a in A'
  . 'b in B'
  all: '(a, b)'
written: "A?? \times B??"


Theorem:
given: A, B, C
where: 'A, B, C is \set'
then:
. 'A \set.union/ A = A'
. 'A \set.intersect/ A = A'
. 'A \set.minus/ A = \empty.set'
. 'A \set.union/ \empty.set = A'
. 'A \set.intersect/ \empty.set = \empty.set'
. 'A \set.union/ (B \set.union/ C) =
    (A \set.union/ B) \set.union/ C'
. 'A \set.intersect/ (B \set.intersect/ C) =
    (A \set.intersect/ B) \set.intersect/ C'
. 'A \set.union/ B = B \set.union/ A'
. 'A \set.intersect/ B = B \set.intersect/ A'
