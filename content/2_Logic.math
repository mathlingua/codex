
::
# Logic

Propositional (or zeroth-order), predicate (or first-order), and second-order
logic form the logical basis for mathematics.

The logical constructs needed to describe mathematics are already provied by
MathLingua.  Commands are defined below that expose those underlying logical
constructs.

First, a proposition is, informally, a statement, and is the fundamental
object in propositional logic, and hence first and second order logic.

Unlike the normal usage of the word *proposition* in mathematics to mean a
"little theorem" (that is true), a proposition is a statement that can be
either true or false.
::


[\proposition]
Defines: P
means: "A logical statement that is either true or false"
written: "\textrm{Proposition}"
called: "proposition"


::
First, we specify when two propositions are not equal.
::


[A \neq/ B]
States:
when: 'A, B is \proposition'
that:
. not: 'A = B'
written: "A? \neq B?"
called: "$A?$ not equal to $B?$"
Metadata:
. resources:
  . source: "@JudsonAbstractAlgebraTheoryAndApplications"
    page: "51"


::
Next, we describe the negation of a proposition.
::


[\not{P}]
States:
when: 'P is \proposition'
that:
. not: 'P'
written: "\neg P??"
called: "not $P?$"


::
Last, we define logical connectives that connect two propositions together.
::


[P \or/ Q]
States:
when: 'P, Q is \proposition'
that:
. or:
  . 'P'
  . 'Q'
written: "P? \vee Q?"
called: "$P?$ or $Q?$"



[P \and/ Q]
States:
when: 'P, Q is \proposition'
that:
. 'P'
. 'Q'
written: "P? \wedge Q?"
called: "$P?$ and $Q?$"


[P \nor/ Q]
States:
when: 'P, Q is \proposition'
that: '\not{P \or/ Q}'
written: "P? \textrm{ nor } Q?"
called: "$P?$ nor $Q?$"


[P \nand/ Q]
States:
when: 'P, Q is \proposition'
that: '\not{P \and/ Q}'
written: "P? \textrm{ nand } Q?"
called: "$P?$ nand $Q?$"


[P \xor/ Q]
States:
when: 'P, Q is \proposition'
that: '(P \or/ Q) \and/ \not{P \and/ Q}'
written: "P? \textrm{ xor } Q?"
called: "$P?$ xor $Q?$"

